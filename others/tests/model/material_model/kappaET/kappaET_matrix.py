"""
== SAMB in full matrix form (* only for crystal) ===
- model : model name.
- molecule : molecule or crystal ?
- group : (tag, detailed str)
- dimension : dimension of full matrix
- ket : ket basis list, orbital@site
- version : MultiPie version
- k_point* : representative k points
- k_path* : high-symmetry line in k space
- A* : transform matrix, [a1,a2,a3]
- bond* : { "bond_#": "vector" }
- matrix : { "z_#": "matrix" }
"""
kappaET = {
    "model": "kappaET",
    "molecule": False,
    "group": ("C2v^8", "space group No. 32 : C2v^8 / Pba2 : PG C2v"),
    "dimension": 8,
    "ket": ["(s,U)@A_1", "(s,D)@A_1", "(s,U)@A_2", "(s,D)@A_2", "(s,U)@A_3", "(s,D)@A_3", "(s,U)@A_4", "(s,D)@A_4"],
    "version": "1.1.2",
    "k_point": {"Γ": "[0, 0, 0]", "X": "[1/2, 0, 0]"},
    "k_path": "Γ-X",
    "A": "[[1.0, 0.0, 0.0], [0.0, 1.2, 0.0], [0.0, 0.0, 1.0]]",
    "bond": {
        "bond_001": "[1/5, -1/10, 0]",
        "bond_002": "[1/5, 1/10, 0]",
        "bond_003": "[-3/10, 1/2, 0]",
        "bond_004": "[3/10, -1/2, 0]",
        "bond_005": "[3/10, 1/2, 0]",
        "bond_006": "[-3/10, -1/2, 0]",
        "bond_007": "[1/2, 2/5, 0]",
        "bond_008": "[-1/2, -2/5, 0]",
        "bond_009": "[-1/2, 2/5, 0]",
        "bond_010": "[1/2, -2/5, 0]",
    },
    "matrix": {
        "z_001": "[[sqrt(2)/4, 0, 0, 0, 0, 0, 0, 0], [0, sqrt(2)/4, 0, 0, 0, 0, 0, 0], [0, 0, sqrt(2)/4, 0, 0, 0, 0, 0], [0, 0, 0, sqrt(2)/4, 0, 0, 0, 0], [0, 0, 0, 0, sqrt(2)/4, 0, 0, 0], [0, 0, 0, 0, 0, sqrt(2)/4, 0, 0], [0, 0, 0, 0, 0, 0, sqrt(2)/4, 0], [0, 0, 0, 0, 0, 0, 0, sqrt(2)/4]]",
        "z_002": "[[0, 0, sqrt(2)*c001/4 + sqrt(2)*I*s001/4, 0, 0, 0, 0, 0], [0, 0, 0, sqrt(2)*c001/4 + sqrt(2)*I*s001/4, 0, 0, 0, 0], [sqrt(2)*c001/4 - sqrt(2)*I*s001/4, 0, 0, 0, 0, 0, 0, 0], [0, sqrt(2)*c001/4 - sqrt(2)*I*s001/4, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, sqrt(2)*c002/4 + sqrt(2)*I*s002/4, 0], [0, 0, 0, 0, 0, 0, 0, sqrt(2)*c002/4 + sqrt(2)*I*s002/4], [0, 0, 0, 0, sqrt(2)*c002/4 - sqrt(2)*I*s002/4, 0, 0, 0], [0, 0, 0, 0, 0, sqrt(2)*c002/4 - sqrt(2)*I*s002/4, 0, 0]]",
        "z_003": "[[0, 0, 0, c001/4 - I*c001/4 + s001/4 + I*s001/4, 0, 0, 0, 0], [0, 0, -c001/4 - I*c001/4 + s001/4 - I*s001/4, 0, 0, 0, 0, 0], [0, -c001/4 + I*c001/4 + s001/4 + I*s001/4, 0, 0, 0, 0, 0, 0], [c001/4 + I*c001/4 + s001/4 - I*s001/4, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, c002/4 + I*c002/4 - s002/4 + I*s002/4], [0, 0, 0, 0, 0, 0, -c002/4 + I*c002/4 - s002/4 - I*s002/4, 0], [0, 0, 0, 0, 0, -c002/4 - I*c002/4 - s002/4 + I*s002/4, 0, 0], [0, 0, 0, 0, c002/4 - I*c002/4 - s002/4 - I*s002/4, 0, 0, 0]]",
        "z_004": "[[0, 0, 0, -c001/4 - I*c001/4 + s001/4 - I*s001/4, 0, 0, 0, 0], [0, 0, c001/4 - I*c001/4 + s001/4 + I*s001/4, 0, 0, 0, 0, 0], [0, c001/4 + I*c001/4 + s001/4 - I*s001/4, 0, 0, 0, 0, 0, 0], [-c001/4 + I*c001/4 + s001/4 + I*s001/4, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, -c002/4 + I*c002/4 - s002/4 - I*s002/4], [0, 0, 0, 0, 0, 0, c002/4 + I*c002/4 - s002/4 + I*s002/4, 0], [0, 0, 0, 0, 0, c002/4 - I*c002/4 - s002/4 - I*s002/4, 0, 0], [0, 0, 0, 0, -c002/4 - I*c002/4 - s002/4 + I*s002/4, 0, 0, 0]]",
        "z_005": "[[0, 0, 0, 0, 0, 0, c003/4 + c005/4 + I*s003/4 - I*s005/4, 0], [0, 0, 0, 0, 0, 0, 0, c003/4 + c005/4 + I*s003/4 - I*s005/4], [0, 0, 0, 0, c003/4 + c005/4 - I*s003/4 + I*s005/4, 0, 0, 0], [0, 0, 0, 0, 0, c003/4 + c005/4 - I*s003/4 + I*s005/4, 0, 0], [0, 0, c003/4 + c005/4 + I*s003/4 - I*s005/4, 0, 0, 0, 0, 0], [0, 0, 0, c003/4 + c005/4 + I*s003/4 - I*s005/4, 0, 0, 0, 0], [c003/4 + c005/4 - I*s003/4 + I*s005/4, 0, 0, 0, 0, 0, 0, 0], [0, c003/4 + c005/4 - I*s003/4 + I*s005/4, 0, 0, 0, 0, 0, 0]]",
        "z_006": "[[0, 0, 0, 0, 0, 0, 0, sqrt(2)*c003/8 - sqrt(2)*I*c003/8 + sqrt(2)*c005/8 + sqrt(2)*I*c005/8 + sqrt(2)*s003/8 + sqrt(2)*I*s003/8 + sqrt(2)*s005/8 - sqrt(2)*I*s005/8], [0, 0, 0, 0, 0, 0, -sqrt(2)*c003/8 - sqrt(2)*I*c003/8 - sqrt(2)*c005/8 + sqrt(2)*I*c005/8 + sqrt(2)*s003/8 - sqrt(2)*I*s003/8 + sqrt(2)*s005/8 + sqrt(2)*I*s005/8, 0], [0, 0, 0, 0, 0, -sqrt(2)*c003/8 + sqrt(2)*I*c003/8 - sqrt(2)*c005/8 - sqrt(2)*I*c005/8 + sqrt(2)*s003/8 + sqrt(2)*I*s003/8 + sqrt(2)*s005/8 - sqrt(2)*I*s005/8, 0, 0], [0, 0, 0, 0, sqrt(2)*c003/8 + sqrt(2)*I*c003/8 + sqrt(2)*c005/8 - sqrt(2)*I*c005/8 + sqrt(2)*s003/8 - sqrt(2)*I*s003/8 + sqrt(2)*s005/8 + sqrt(2)*I*s005/8, 0, 0, 0], [0, 0, 0, sqrt(2)*c003/8 - sqrt(2)*I*c003/8 + sqrt(2)*c005/8 + sqrt(2)*I*c005/8 + sqrt(2)*s003/8 + sqrt(2)*I*s003/8 + sqrt(2)*s005/8 - sqrt(2)*I*s005/8, 0, 0, 0, 0], [0, 0, -sqrt(2)*c003/8 - sqrt(2)*I*c003/8 - sqrt(2)*c005/8 + sqrt(2)*I*c005/8 + sqrt(2)*s003/8 - sqrt(2)*I*s003/8 + sqrt(2)*s005/8 + sqrt(2)*I*s005/8, 0, 0, 0, 0, 0], [0, -sqrt(2)*c003/8 + sqrt(2)*I*c003/8 - sqrt(2)*c005/8 - sqrt(2)*I*c005/8 + sqrt(2)*s003/8 + sqrt(2)*I*s003/8 + sqrt(2)*s005/8 - sqrt(2)*I*s005/8, 0, 0, 0, 0, 0, 0], [sqrt(2)*c003/8 + sqrt(2)*I*c003/8 + sqrt(2)*c005/8 - sqrt(2)*I*c005/8 + sqrt(2)*s003/8 - sqrt(2)*I*s003/8 + sqrt(2)*s005/8 + sqrt(2)*I*s005/8, 0, 0, 0, 0, 0, 0, 0]]",
        "z_007": "[[0, 0, 0, 0, 0, 0, 0, -sqrt(2)*c003/8 - sqrt(2)*I*c003/8 - sqrt(2)*c005/8 + sqrt(2)*I*c005/8 + sqrt(2)*s003/8 - sqrt(2)*I*s003/8 + sqrt(2)*s005/8 + sqrt(2)*I*s005/8], [0, 0, 0, 0, 0, 0, sqrt(2)*c003/8 - sqrt(2)*I*c003/8 + sqrt(2)*c005/8 + sqrt(2)*I*c005/8 + sqrt(2)*s003/8 + sqrt(2)*I*s003/8 + sqrt(2)*s005/8 - sqrt(2)*I*s005/8, 0], [0, 0, 0, 0, 0, sqrt(2)*c003/8 + sqrt(2)*I*c003/8 + sqrt(2)*c005/8 - sqrt(2)*I*c005/8 + sqrt(2)*s003/8 - sqrt(2)*I*s003/8 + sqrt(2)*s005/8 + sqrt(2)*I*s005/8, 0, 0], [0, 0, 0, 0, -sqrt(2)*c003/8 + sqrt(2)*I*c003/8 - sqrt(2)*c005/8 - sqrt(2)*I*c005/8 + sqrt(2)*s003/8 + sqrt(2)*I*s003/8 + sqrt(2)*s005/8 - sqrt(2)*I*s005/8, 0, 0, 0], [0, 0, 0, -sqrt(2)*c003/8 - sqrt(2)*I*c003/8 - sqrt(2)*c005/8 + sqrt(2)*I*c005/8 + sqrt(2)*s003/8 - sqrt(2)*I*s003/8 + sqrt(2)*s005/8 + sqrt(2)*I*s005/8, 0, 0, 0, 0], [0, 0, sqrt(2)*c003/8 - sqrt(2)*I*c003/8 + sqrt(2)*c005/8 + sqrt(2)*I*c005/8 + sqrt(2)*s003/8 + sqrt(2)*I*s003/8 + sqrt(2)*s005/8 - sqrt(2)*I*s005/8, 0, 0, 0, 0, 0], [0, sqrt(2)*c003/8 + sqrt(2)*I*c003/8 + sqrt(2)*c005/8 - sqrt(2)*I*c005/8 + sqrt(2)*s003/8 - sqrt(2)*I*s003/8 + sqrt(2)*s005/8 + sqrt(2)*I*s005/8, 0, 0, 0, 0, 0, 0], [-sqrt(2)*c003/8 + sqrt(2)*I*c003/8 - sqrt(2)*c005/8 - sqrt(2)*I*c005/8 + sqrt(2)*s003/8 + sqrt(2)*I*s003/8 + sqrt(2)*s005/8 - sqrt(2)*I*s005/8, 0, 0, 0, 0, 0, 0, 0]]",
        "z_008": "[[0, 0, 0, 0, 0, 0, I*c003/4 + I*c005/4 - s003/4 + s005/4, 0], [0, 0, 0, 0, 0, 0, 0, -I*c003/4 - I*c005/4 + s003/4 - s005/4], [0, 0, 0, 0, I*c003/4 + I*c005/4 + s003/4 - s005/4, 0, 0, 0], [0, 0, 0, 0, 0, -I*c003/4 - I*c005/4 - s003/4 + s005/4, 0, 0], [0, 0, -I*c003/4 - I*c005/4 + s003/4 - s005/4, 0, 0, 0, 0, 0], [0, 0, 0, I*c003/4 + I*c005/4 - s003/4 + s005/4, 0, 0, 0, 0], [-I*c003/4 - I*c005/4 - s003/4 + s005/4, 0, 0, 0, 0, 0, 0, 0], [0, I*c003/4 + I*c005/4 + s003/4 - s005/4, 0, 0, 0, 0, 0, 0]]",
        "z_009": "[[0, 0, 0, 0, c007/4 + c009/4 + I*s007/4 + I*s009/4, 0, 0, 0], [0, 0, 0, 0, 0, c007/4 + c009/4 + I*s007/4 + I*s009/4, 0, 0], [0, 0, 0, 0, 0, 0, c007/4 + c009/4 - I*s007/4 - I*s009/4, 0], [0, 0, 0, 0, 0, 0, 0, c007/4 + c009/4 - I*s007/4 - I*s009/4], [c007/4 + c009/4 - I*s007/4 - I*s009/4, 0, 0, 0, 0, 0, 0, 0], [0, c007/4 + c009/4 - I*s007/4 - I*s009/4, 0, 0, 0, 0, 0, 0], [0, 0, c007/4 + c009/4 + I*s007/4 + I*s009/4, 0, 0, 0, 0, 0], [0, 0, 0, c007/4 + c009/4 + I*s007/4 + I*s009/4, 0, 0, 0, 0]]",
        "z_010": "[[0, 0, 0, 0, 0, sqrt(2)*c007/8 - sqrt(2)*I*c007/8 - sqrt(2)*c009/8 - sqrt(2)*I*c009/8 + sqrt(2)*s007/8 + sqrt(2)*I*s007/8 + sqrt(2)*s009/8 - sqrt(2)*I*s009/8, 0, 0], [0, 0, 0, 0, -sqrt(2)*c007/8 - sqrt(2)*I*c007/8 + sqrt(2)*c009/8 - sqrt(2)*I*c009/8 + sqrt(2)*s007/8 - sqrt(2)*I*s007/8 + sqrt(2)*s009/8 + sqrt(2)*I*s009/8, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, -sqrt(2)*c007/8 + sqrt(2)*I*c007/8 + sqrt(2)*c009/8 + sqrt(2)*I*c009/8 + sqrt(2)*s007/8 + sqrt(2)*I*s007/8 + sqrt(2)*s009/8 - sqrt(2)*I*s009/8], [0, 0, 0, 0, 0, 0, sqrt(2)*c007/8 + sqrt(2)*I*c007/8 - sqrt(2)*c009/8 + sqrt(2)*I*c009/8 + sqrt(2)*s007/8 - sqrt(2)*I*s007/8 + sqrt(2)*s009/8 + sqrt(2)*I*s009/8, 0], [0, -sqrt(2)*c007/8 + sqrt(2)*I*c007/8 + sqrt(2)*c009/8 + sqrt(2)*I*c009/8 + sqrt(2)*s007/8 + sqrt(2)*I*s007/8 + sqrt(2)*s009/8 - sqrt(2)*I*s009/8, 0, 0, 0, 0, 0, 0], [sqrt(2)*c007/8 + sqrt(2)*I*c007/8 - sqrt(2)*c009/8 + sqrt(2)*I*c009/8 + sqrt(2)*s007/8 - sqrt(2)*I*s007/8 + sqrt(2)*s009/8 + sqrt(2)*I*s009/8, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, sqrt(2)*c007/8 - sqrt(2)*I*c007/8 - sqrt(2)*c009/8 - sqrt(2)*I*c009/8 + sqrt(2)*s007/8 + sqrt(2)*I*s007/8 + sqrt(2)*s009/8 - sqrt(2)*I*s009/8, 0, 0, 0, 0], [0, 0, -sqrt(2)*c007/8 - sqrt(2)*I*c007/8 + sqrt(2)*c009/8 - sqrt(2)*I*c009/8 + sqrt(2)*s007/8 - sqrt(2)*I*s007/8 + sqrt(2)*s009/8 + sqrt(2)*I*s009/8, 0, 0, 0, 0, 0]]",
        "z_011": "[[0, 0, 0, 0, 0, -sqrt(2)*c007/8 - sqrt(2)*I*c007/8 + sqrt(2)*c009/8 - sqrt(2)*I*c009/8 + sqrt(2)*s007/8 - sqrt(2)*I*s007/8 + sqrt(2)*s009/8 + sqrt(2)*I*s009/8, 0, 0], [0, 0, 0, 0, sqrt(2)*c007/8 - sqrt(2)*I*c007/8 - sqrt(2)*c009/8 - sqrt(2)*I*c009/8 + sqrt(2)*s007/8 + sqrt(2)*I*s007/8 + sqrt(2)*s009/8 - sqrt(2)*I*s009/8, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, sqrt(2)*c007/8 + sqrt(2)*I*c007/8 - sqrt(2)*c009/8 + sqrt(2)*I*c009/8 + sqrt(2)*s007/8 - sqrt(2)*I*s007/8 + sqrt(2)*s009/8 + sqrt(2)*I*s009/8], [0, 0, 0, 0, 0, 0, -sqrt(2)*c007/8 + sqrt(2)*I*c007/8 + sqrt(2)*c009/8 + sqrt(2)*I*c009/8 + sqrt(2)*s007/8 + sqrt(2)*I*s007/8 + sqrt(2)*s009/8 - sqrt(2)*I*s009/8, 0], [0, sqrt(2)*c007/8 + sqrt(2)*I*c007/8 - sqrt(2)*c009/8 + sqrt(2)*I*c009/8 + sqrt(2)*s007/8 - sqrt(2)*I*s007/8 + sqrt(2)*s009/8 + sqrt(2)*I*s009/8, 0, 0, 0, 0, 0, 0], [-sqrt(2)*c007/8 + sqrt(2)*I*c007/8 + sqrt(2)*c009/8 + sqrt(2)*I*c009/8 + sqrt(2)*s007/8 + sqrt(2)*I*s007/8 + sqrt(2)*s009/8 - sqrt(2)*I*s009/8, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, -sqrt(2)*c007/8 - sqrt(2)*I*c007/8 + sqrt(2)*c009/8 - sqrt(2)*I*c009/8 + sqrt(2)*s007/8 - sqrt(2)*I*s007/8 + sqrt(2)*s009/8 + sqrt(2)*I*s009/8, 0, 0, 0, 0], [0, 0, sqrt(2)*c007/8 - sqrt(2)*I*c007/8 - sqrt(2)*c009/8 - sqrt(2)*I*c009/8 + sqrt(2)*s007/8 + sqrt(2)*I*s007/8 + sqrt(2)*s009/8 - sqrt(2)*I*s009/8, 0, 0, 0, 0, 0]]",
        "z_012": "[[0, 0, 0, 0, I*c007/4 + I*c009/4 - s007/4 - s009/4, 0, 0, 0], [0, 0, 0, 0, 0, -I*c007/4 - I*c009/4 + s007/4 + s009/4, 0, 0], [0, 0, 0, 0, 0, 0, I*c007/4 + I*c009/4 + s007/4 + s009/4, 0], [0, 0, 0, 0, 0, 0, 0, -I*c007/4 - I*c009/4 - s007/4 - s009/4], [-I*c007/4 - I*c009/4 - s007/4 - s009/4, 0, 0, 0, 0, 0, 0, 0], [0, I*c007/4 + I*c009/4 + s007/4 + s009/4, 0, 0, 0, 0, 0, 0], [0, 0, -I*c007/4 - I*c009/4 + s007/4 + s009/4, 0, 0, 0, 0, 0], [0, 0, 0, I*c007/4 + I*c009/4 - s007/4 - s009/4, 0, 0, 0, 0]]",
    },
}
